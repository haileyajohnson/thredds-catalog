if (!name.equals(rootProject.name)) {
  throw new GradleException("This script plugin should only be applied to the root project, not '$name'.")
}

// Without declaring a repository, this plugin script will fail with:
// Execution failed for task ':jacocoMerge'.
// > Could not resolve all files for configuration ':jacocoAnt'.
repositories {
  mavenCentral()
}

apply plugin: 'jacoco'
apply plugin: 'base' // Gives us the "clean" task for removing rootJacocoReport's output.

// Modified from:
// https://gist.github.com/tsjensen/d8b9ab9e6314ae2f63f4955c44399dad

def getProjectList() {
  // These projects are considered. Replace with a different list as needed.
  subprojects + project
}

// task to merge the exec files produced by subprojects.
task jacocoMerge(type: JacocoMerge) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = 'Merge the JaCoCo data files from all subprojects into one'
  // Need all projects to be evaluated, otherwise the hasPlugin('jacoco') will not find anything.
  gradle.projectsEvaluated {
    // an empty FileCollection used to collect exec files from subprojects.
    FileCollection execFiles = project.objects.fileCollection()
    getProjectList().each {Project subproject ->
      if (subproject.plugins.hasPlugin('jacoco')) {
        def testTasks = subproject.tasks.withType(Test)
        // ensure that .exec files are actually present
        dependsOn(testTasks)

        testTasks.each {Test task ->
          // The JacocoTaskExtension is the source of truth for the location of the .exec file.
          JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
          if (extension != null) {
            execFiles.from extension.getDestinationFile()
          }
        }
      }
    }

    executionData = execFiles

    doFirst {
      // .exec files might be missing if a project has no tests. Filter in execution phase.
      executionData = executionData.filter {
        it.canRead()
      }
    }
  }
}

def getReportTasks(JacocoReport pRootTask) {
  getProjectList().collect {
    it.tasks.withType(JacocoReport).findAll {
      it != pRootTask
    }
  }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  description = 'Generates an aggregate report from all subprojects'

  executionData.from tasks.jacocoMerge.destinationFile

  reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled = false
  }

  // subprojects must be evaluated so that we can grab their source and class directories.
  gradle.projectsEvaluated {
    // The JacocoReport tasks are the source of truth for class files and sources.
    def reportTasks = getReportTasks(tasks.jacocoRootReport)

    classDirectories.from project.files({
      reportTasks.collect {it.classDirectories}.findAll {it != null}
    })
    sourceDirectories.from project.files({
      reportTasks.collect {it.sourceDirectories}.findAll {it != null}
    })
  }
}
